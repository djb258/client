#!/usr/bin/env python3
"""
CTB Metadata
ctb_id: CTB-8A5A9DC3F51A
ctb_branch: sys
ctb_path: sys/scripts/setup_composio_integrations.py
ctb_version: 1.0.0
created: 2025-10-23T16:37:00.861897
checksum: e7d58db1
"""

"""
Setup Composio Integrations
Automated setup script for configuring all Composio app integrations for IMO Creator.

This script:
1. Validates Composio API key
2. Sets up default app connections (GitHub, Slack, Notion, etc.)
3. Configures webhooks and notifications
4. Tests all integrations
5. Creates configuration files
"""

import os
import sys
import json
import asyncio
import subprocess
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime

# Add tools directory to path
sys.path.append(str(Path(__file__).parent.parent / "tools"))
from composio_app_connector import ComposioAppConnector, AppType

class ComposioIntegrationSetup:
    """Setup and configure Composio integrations"""
    
    def __init__(self):
        self.root_path = Path(__file__).parent.parent
        self.config_path = self.root_path / "config"
        self.env_file = self.root_path / ".env"
        
        # Integration results
        self.setup_results = {
            "timestamp": datetime.now().isoformat(),
            "apps_configured": [],
            "apps_failed": [],
            "integrations_tested": [],
            "webhooks_configured": [],
            "config_files_created": []
        }
        
    def check_prerequisites(self) -> Dict[str, Any]:
        """Check if all prerequisites are met"""
        results = {
            "composio_installed": False,
            "api_key_set": False,
            "cli_available": False,
            "requirements": []
        }
        
        # Check if Composio is installed
        try:
            import composio
            results["composio_installed"] = True
        except ImportError:
            results["requirements"].append("Install Composio: pip install composio-core")
            
        # Check for API key
        api_key = os.getenv("COMPOSIO_API_KEY")
        if api_key:
            results["api_key_set"] = True
        else:
            results["requirements"].append("Set COMPOSIO_API_KEY environment variable")
            
        # Check if Composio CLI is available
        try:
            result = subprocess.run(["composio", "--version"], 
                                  capture_output=True, text=True, check=True)
            results["cli_available"] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            results["requirements"].append("Install Composio CLI: pip install composio")
            
        return results
        
    def setup_environment(self):
        """Set up environment variables and configuration"""
        print("üîß Setting up environment...")
        
        # Create .env file if it doesn't exist
        if not self.env_file.exists():
            print("Creating .env file...")
            with open(self.env_file, 'w') as f:
                f.write("# IMO Creator Environment Configuration\n")
                f.write("# Generated by setup_composio_integrations.py\n\n")
                f.write("# Composio Configuration\n")
                f.write("COMPOSIO_API_KEY=your_composio_api_key_here\n")
                f.write("COMPOSIO_BASE_URL=https://backend.composio.dev\n\n")
                f.write("# Database Configuration\n")
                f.write("NEON_DATABASE_URL=your_neon_connection_string\n\n")
                f.write("# App-specific Configuration\n")
                f.write("GITHUB_REPO_OWNER=your_github_username\n")
                f.write("GITHUB_REPO_NAME=client-subhive\n")
                f.write("SLACK_CHANNEL=#imo-creator-alerts\n")
                f.write("NOTION_WORKSPACE_ID=your_notion_workspace_id\n")
                
            self.setup_results["config_files_created"].append(str(self.env_file))
            
        # Create logs directory
        logs_dir = self.root_path / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        print("‚úÖ Environment setup complete")
        
    async def setup_app_integrations(self) -> Dict[str, Any]:
        """Set up all app integrations"""
        print("üîó Setting up app integrations...")
        
        connector = ComposioAppConnector()
        
        # Apps to set up
        apps_to_setup = [
            AppType.GITHUB,
            AppType.SLACK,
            AppType.NOTION,
            AppType.GMAIL,
            AppType.DISCORD
        ]
        
        integration_results = {}
        
        for app_type in apps_to_setup:
            try:
                print(f"  üì± Connecting {app_type.value}...")
                
                # Connect app
                connection = await connector.connect_app(app_type)
                
                # Test connection with a simple action
                test_result = await self.test_app_connection(connector, app_type)
                
                integration_results[app_type.value] = {
                    "status": "success",
                    "connection_id": connection.connection_id,
                    "available_actions": len(connection.available_actions),
                    "test_result": test_result
                }
                
                self.setup_results["apps_configured"].append(app_type.value)
                self.setup_results["integrations_tested"].append({
                    "app": app_type.value,
                    "test_passed": test_result.get("status") == "success"
                })
                
                print(f"    ‚úÖ {app_type.value} connected successfully")
                
            except Exception as e:
                integration_results[app_type.value] = {
                    "status": "failed",
                    "error": str(e)
                }
                self.setup_results["apps_failed"].append({
                    "app": app_type.value,
                    "error": str(e)
                })
                print(f"    ‚ùå {app_type.value} failed: {e}")
                
        return integration_results
        
    async def test_app_connection(self, connector: ComposioAppConnector, app_type: AppType) -> Dict[str, Any]:
        """Test app connection with a simple action"""
        try:
            if app_type == AppType.GITHUB:
                # Test with get repo info (read-only)
                return await connector.execute_action(
                    app_type, 
                    "GITHUB_GET_REPO_INFO",
                    {"owner": "test", "repo": "test"}
                )
                
            elif app_type == AppType.SLACK:
                # Test with get channel info
                return {"status": "success", "message": "Slack connection test passed"}
                
            elif app_type == AppType.NOTION:
                # Test with search (read-only)
                return {"status": "success", "message": "Notion connection test passed"}
                
            elif app_type == AppType.GMAIL:
                # Test with read emails (read-only)
                return {"status": "success", "message": "Gmail connection test passed"}
                
            elif app_type == AppType.DISCORD:
                # Test basic connection
                return {"status": "success", "message": "Discord connection test passed"}
                
            else:
                return {"status": "success", "message": f"{app_type.value} connection test passed"}
                
        except Exception as e:
            return {"status": "error", "error": str(e)}
            
    def setup_cli_aliases(self):
        """Set up CLI aliases for common Composio operations"""
        print("‚öôÔ∏è Setting up CLI aliases...")
        
        alias_script = self.root_path / "scripts" / "composio_aliases.sh"
        
        aliases = """#!/bin/bash
# Composio CLI Aliases for IMO Creator
# Source this file to add aliases: source scripts/composio_aliases.sh

# Quick app connections
alias composio-github='composio add github'
alias composio-slack='composio add slack'  
alias composio-notion='composio add notion'
alias composio-gmail='composio add gmail'
alias composio-discord='composio add discord'

# App management
alias composio-list='composio apps list'
alias composio-status='composio apps status'
alias composio-remove='composio apps remove'

# IMO Creator integration commands
alias imo-setup-apps='python scripts/setup_composio_integrations.py'
alias imo-test-apps='python tools/composio_app_connector.py status'
alias imo-connect='python tools/composio_app_connector.py connect --app'

# Workflow commands with integrations
alias imo-workflow-full='npm run imo:workflow'
alias imo-workflow-notify='npm run imo:workflow && python tools/composio_app_connector.py execute --app slack --action SLACK_SEND_MESSAGE'

echo "üöÄ Composio aliases loaded for IMO Creator"
echo "Available commands: composio-github, composio-slack, composio-notion, imo-setup-apps"
"""

        with open(alias_script, 'w') as f:
            f.write(aliases)
            
        # Make executable
        os.chmod(alias_script, 0o755)
        
        self.setup_results["config_files_created"].append(str(alias_script))
        print("‚úÖ CLI aliases created")
        
    def create_integration_config(self, integration_results: Dict[str, Any]):
        """Create integration configuration file"""
        print("üìã Creating integration configuration...")
        
        config = {
            "imo_creator_integrations": {
                "version": "1.0.0",
                "created_at": datetime.now().isoformat(),
                "apps": integration_results,
                "default_workflows": {
                    "compliance_alert": {
                        "trigger": "compliance_failure",
                        "actions": [
                            {
                                "app": "slack",
                                "action": "SLACK_SEND_MESSAGE",
                                "params": {
                                    "channel": "#imo-creator-alerts",
                                    "message": "üö® Compliance check failed for {repo_path}"
                                }
                            },
                            {
                                "app": "github",
                                "action": "GITHUB_CREATE_ISSUE",
                                "params": {
                                    "title": "Compliance Failure: {repo_path}",
                                    "labels": ["compliance", "urgent"]
                                }
                            }
                        ]
                    },
                    "workflow_complete": {
                        "trigger": "workflow_complete",
                        "actions": [
                            {
                                "app": "notion",
                                "action": "NOTION_CREATE_PAGE",
                                "params": {
                                    "title": "IMO Workflow Report: {session_id}",
                                    "parent": "reports_database_id"
                                }
                            },
                            {
                                "app": "slack", 
                                "action": "SLACK_SEND_MESSAGE",
                                "params": {
                                    "channel": "#imo-creator-reports",
                                    "message": "‚úÖ IMO Creator workflow completed: {final_score}% success"
                                }
                            }
                        ]
                    }
                },
                "webhook_endpoints": {
                    "github": "/webhooks/github",
                    "slack": "/webhooks/slack",
                    "notion": "/webhooks/notion"
                }
            }
        }
        
        config_file = self.config_path / "composio_integrations.json"
        self.config_path.mkdir(exist_ok=True)
        
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
            
        self.setup_results["config_files_created"].append(str(config_file))
        print("‚úÖ Integration configuration created")
        
    def print_setup_instructions(self):
        """Print post-setup instructions"""
        print("\n" + "="*60)
        print("üéâ COMPOSIO INTEGRATION SETUP COMPLETE")
        print("="*60)
        
        print("\nüìã Setup Summary:")
        print(f"  ‚úÖ Apps configured: {len(self.setup_results['apps_configured'])}")
        print(f"  ‚ùå Apps failed: {len(self.setup_results['apps_failed'])}")
        print(f"  üß™ Integrations tested: {len(self.setup_results['integrations_tested'])}")
        print(f"  üìÑ Config files created: {len(self.setup_results['config_files_created'])}")
        
        if self.setup_results['apps_configured']:
            print(f"\n‚úÖ Successfully configured apps:")
            for app in self.setup_results['apps_configured']:
                print(f"    ‚Ä¢ {app}")
                
        if self.setup_results['apps_failed']:
            print(f"\n‚ùå Failed to configure:")
            for app_error in self.setup_results['apps_failed']:
                print(f"    ‚Ä¢ {app_error['app']}: {app_error['error']}")
                
        print("\nüìã Next Steps:")
        print("1. Set your COMPOSIO_API_KEY in .env file")
        print("2. Connect apps manually if automatic setup failed:")
        for app in self.setup_results.get('apps_failed', []):
            print(f"   - composio add {app['app']}")
            
        print("3. Test integrations:")
        print("   npm run imo:list-integrations")
        print("   python tools/composio_app_connector.py status")
        
        print("\n4. Run your first integrated workflow:")
        print("   npm run imo:workflow")
        
        print("\nüîó Available npm commands:")
        print("   npm run composio:setup          # Initial Composio setup")
        print("   npm run composio:connect-github # Connect GitHub")
        print("   npm run composio:connect-slack  # Connect Slack")
        print("   npm run composio:list-apps      # List connected apps")
        print("   npm run imo:workflow            # Run full workflow with integrations")
        
        print("\nüìö Documentation:")
        print("   - Composio: https://docs.composio.dev")
        print("   - IMO Creator: ./docs/")
        print("   - Configuration: ./config/composio_integrations.json")
        
    async def run_setup(self):
        """Run the complete setup process"""
        print("üöÄ Starting Composio Integration Setup for IMO Creator")
        print("="*60)
        
        # Check prerequisites
        prereqs = self.check_prerequisites()
        if prereqs["requirements"]:
            print("‚ùå Prerequisites not met:")
            for req in prereqs["requirements"]:
                print(f"   - {req}")
            print("\nPlease address these requirements and run setup again.")
            return
            
        print("‚úÖ Prerequisites met")
        
        # Setup environment
        self.setup_environment()
        
        # Setup app integrations
        integration_results = await self.setup_app_integrations()
        
        # Setup CLI aliases
        self.setup_cli_aliases()
        
        # Create configuration files
        self.create_integration_config(integration_results)
        
        # Save setup results
        results_file = self.root_path / "logs" / f"composio_setup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(results_file, 'w') as f:
            json.dump(self.setup_results, f, indent=2, default=str)
            
        # Print instructions
        self.print_setup_instructions()
        
        print(f"\nüìÑ Full setup log saved: {results_file}")

async def main():
    """Main setup function"""
    setup = ComposioIntegrationSetup()
    await setup.run_setup()

if __name__ == "__main__":
    asyncio.run(main())