{
  "name": "Barton - Company Intake Flow",
  "nodes": [
    {
      "parameters": {
        "path": "intake/company",
        "options": {},
        "responseMode": "responseNode"
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "barton-company-intake"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO staging.raw_intake_company (raw_data, source, processed) VALUES ($1::jsonb, $2, false) RETURNING intake_id;",
        "additionalFields": {
          "mode": "independently"
        }
      },
      "name": "Insert Raw Company",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [500, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Neon PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$env.COMPOSIO_URL}}/validate/company",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 30000
        }
      },
      "name": "Trigger Validator Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [750, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.status}}",
              "operation": "equals",
              "value2": "valid"
            }
          ]
        }
      },
      "name": "Check Validation Result",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.company_master (company_uid, company_name, ein, status, column_number, column_description, column_format) VALUES ($1, $2, $3, 'active', 1, 'Company from n8n intake', 'TEXT') ON CONFLICT (company_uid) DO UPDATE SET company_name = EXCLUDED.company_name, ein = EXCLUDED.ein, updated_at = NOW();",
        "additionalFields": {}
      },
      "name": "Promote to Core",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1250, 200],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Neon PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO operations.audit_data_lineage (entity_uid, attribute_code, attribute_value, action_type, filled_by, column_number, column_description, column_format) VALUES ($1, 'INTAKE', 'company_intake', 'CREATE', 'n8n-workflow', 1, 'Company intake audit', 'TEXT');",
        "additionalFields": {}
      },
      "name": "Log Success Audit",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1500, 200],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Neon PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO operations.audit_data_lineage (entity_uid, attribute_code, attribute_value, action_type, filled_by, column_number, column_description, column_format) VALUES ($1, 'VALIDATION_FAILED', $2, 'ERROR', 'n8n-workflow', 1, 'Company validation failed', 'TEXT');",
        "additionalFields": {}
      },
      "name": "Log Failure Audit",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1250, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Neon PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"company_uid\": $json.company_uid, \"intake_id\": $json.intake_id, \"message\": \"Company intake successful\" } }}"
      },
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1750, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": $json.error, \"message\": \"Company validation failed\" } }}",
        "options": {
          "responseCode": 400
        }
      },
      "name": "Failure Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1500, 400]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Insert Raw Company",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Raw Company": {
      "main": [
        [
          {
            "node": "Trigger Validator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Validator Agent": {
      "main": [
        [
          {
            "node": "Check Validation Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation Result": {
      "main": [
        [
          {
            "node": "Promote to Core",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Failure Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Promote to Core": {
      "main": [
        [
          {
            "node": "Log Success Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success Audit": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Failure Audit": {
      "main": [
        [
          {
            "node": "Failure Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-27T00:00:00.000Z",
      "updatedAt": "2025-10-27T00:00:00.000Z",
      "id": "1",
      "name": "Barton"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-27T00:00:00.000Z",
  "versionId": "1"
}
