{
  "meta": {
    "project_name": "Client Intake & Vendor Export System",
    "repo": "client",
    "branch": "get-ingest",
    "version": "v1.0.0",
    "maintainer": "Barton Ops System",
    "created_by": "Claude Code via Nix",
    "created_at": "2025-10-20",
    "last_updated": "2025-10-20",
    "manifest_version": "1.0.0"
  },
  "llm_overview": {
    "llm_readme": "README_LLM_OVERVIEW.md",
    "bootstrap_config": "bootstrap_program.json",
    "validation_script": "scripts/setup_agent_env.ts",
    "npm_validation": "agent:validate-env",
    "training_docs": "training/",
    "agent_examples": "training/EXAMPLES.md",
    "architecture_map": "training/CTB_MAP.md",
    "agent_structure": "training/README_AGENT_STRUCTURE.md"
  },
  "data_layers": {
    "input": "Firebase intake wizard",
    "input_location": "apps/ui/",
    "input_tech": "React 18 + TypeScript + Vite + Firebase",
    "middle": "Neon canonical schema (clnt.*)",
    "middle_location": "db/neon/01_schema.sql",
    "middle_tech": "PostgreSQL (Neon)",
    "output": "Vendor-specific export tables",
    "output_location": "scripts/run_vendor_export.ts",
    "output_tech": "TypeScript + PostgreSQL",
    "audit": "shq.audit_log, shq.error_log",
    "audit_location": "db/neon/05_audit_log.sql, db/neon/06_error_log.sql",
    "validation": "Firestore security rules + setup_agent_env.ts",
    "validation_location": "firebase/firestore.rules, scripts/setup_agent_env.ts"
  },
  "enforcement_doctrine": {
    "CTB": true,
    "CTB_description": "Canonical-to-Blueprint architecture (5 layers: System, Data, Application, AI/Agent, UI)",
    "ORBT": true,
    "ORBT_description": "Operational Repair, Build, Troubleshooting/Training - system responsibility model",
    "STAMPED": true,
    "STAMPED_description": "Blueprint versioning enforcement (validator_signature + timestamp_last_touched)",
    "HEIR": true,
    "HEIR_description": "Hierarchical Execution Intelligence & Repair (altitude-based agent coordination: 30k-5k ft)",
    "IMO": true,
    "IMO_description": "Input-Middle-Output data flow pattern"
  },
  "required_tables": [
    {
      "table": "clnt.employee_vendor_ids",
      "schema": "clnt",
      "purpose": "Vendor-specific employee ID cross-reference tracking",
      "migration": "db/neon/04_employee_vendor_ids.sql",
      "unique_constraint": "(employee_id, vendor_code)"
    },
    {
      "table": "shq.audit_log",
      "schema": "shq",
      "purpose": "Comprehensive action audit logging for all agent operations",
      "migration": "db/neon/05_audit_log.sql",
      "key_fields": ["agent_id", "process_type", "action", "status", "duration_ms"]
    },
    {
      "table": "shq.error_log",
      "schema": "shq",
      "purpose": "Centralized error logging with resolution workflow",
      "migration": "db/neon/06_error_log.sql",
      "key_fields": ["error_type", "error_message", "resolved", "details"],
      "helper_functions": ["shq.log_error()", "shq.resolve_error()"],
      "views": ["error_log_unresolved", "error_log_critical", "error_log_summary_by_agent"]
    }
  ],
  "agent_blueprint": {
    "blueprint_version": "v1.0.0",
    "validator_signature": "SHQ-INTAKE-VALIDATOR",
    "enforcement_files": [
      "firebase/firestore.rules",
      "scripts/setup_agent_env.ts",
      "db/neon/04_employee_vendor_ids.sql",
      "db/neon/05_audit_log.sql",
      "db/neon/06_error_log.sql"
    ],
    "required_versioning_fields": [
      "blueprint_version",
      "validator_signature",
      "timestamp_last_touched"
    ],
    "enforcement_level": "REQUIRED - Security rules reject writes without these fields"
  },
  "log_schema": {
    "error_log": {
      "description": "See db/neon/ERROR_LOG_README.md",
      "table": "shq.error_log",
      "key_columns": [
        "error_id (UUID)",
        "agent_id (TEXT)",
        "process_id (TEXT)",
        "error_type (TEXT)",
        "error_message (TEXT)",
        "details (JSONB)",
        "resolved (BOOLEAN)",
        "timestamp_created (TIMESTAMPTZ)"
      ],
      "npm_scripts": [
        "errors:check",
        "errors:unresolved",
        "errors:critical",
        "errors:summary"
      ]
    },
    "audit_log": {
      "description": "See db/neon/05_audit_log.sql",
      "table": "shq.audit_log",
      "key_columns": [
        "audit_id (UUID)",
        "agent_id (TEXT)",
        "process_type (TEXT)",
        "action (TEXT)",
        "status (TEXT)",
        "duration_ms (INTEGER)",
        "metadata (JSONB)",
        "timestamp_created (TIMESTAMPTZ)"
      ],
      "purpose": "Track all agent actions for compliance and debugging"
    }
  },
  "quick_reference": {
    "validate_env": "npm run agent:validate-env",
    "validate_env_description": "Validates bootstrap config, database connection, and required tables",
    "trigger_agent": "Run via Claude or MCP using bootstrap_program.json",
    "repo_ready": true,
    "repo_ready_checks": [
      "bootstrap_program.json exists",
      "Required tables exist in Neon",
      "Firebase security rules enforce versioning",
      "Agent validation script available"
    ]
  },
  "agents": {
    "SHQ-INTAKE-VALIDATOR": {
      "type": "Validator",
      "altitude": "20,000 ft",
      "responsibilities": "Validate company/employee data before Neon promotion",
      "code_reference": "apps/ui/src/services/composio/client-intake.ts"
    },
    "VENDOR-EXPORT-AGENT": {
      "type": "Transformer",
      "altitude": "10,000 ft",
      "responsibilities": "Transform canonical data to vendor-specific tables",
      "code_reference": "scripts/run_vendor_export.ts"
    },
    "COMPLIANCE-CHECKER": {
      "type": "Validator",
      "altitude": "20,000 ft",
      "responsibilities": "Enforce repo standards and schema compliance",
      "code_reference": "tools/repo_compliance_check.py"
    },
    "SUBAGENT-DELEGATOR": {
      "type": "Orchestration",
      "altitude": "30,000 ft",
      "responsibilities": "Route repair tasks to specialized subagents",
      "code_reference": "mechanic/recall/subagent-delegator.py"
    },
    "REPO-MCP-ORCHESTRATOR": {
      "type": "Orchestration",
      "altitude": "30,000 ft",
      "responsibilities": "Coordinate MCP tool execution",
      "code_reference": "tools/repo_mcp_orchestrator.py"
    }
  },
  "key_workflows": {
    "intake": {
      "description": "Client data intake via 4-step wizard",
      "steps": [
        "User fills wizard (apps/ui/)",
        "Data staged in Firebase",
        "SHQ-INTAKE-VALIDATOR validates",
        "Promoted to Neon canonical (clnt.*)",
        "Logged to shq.audit_log"
      ],
      "npm_script": "promote"
    },
    "export": {
      "description": "Transform canonical data to vendor-specific format",
      "steps": [
        "Fetch vendor blueprint",
        "Query canonical tables with JOINs",
        "Transform using vendor mappings",
        "Include vendor IDs from employee_vendor_ids",
        "Write to vendor_output_* tables",
        "Log to shq.audit_log"
      ],
      "npm_script": "export:run"
    },
    "validation": {
      "description": "Validate agent environment before execution",
      "steps": [
        "Check bootstrap_program.json exists",
        "Verify Neon database connection",
        "Confirm required tables exist",
        "Report success/failure"
      ],
      "npm_script": "agent:validate-env"
    }
  },
  "database_config": {
    "firebase": {
      "project_id": "client_intake",
      "collections": ["company", "employee", "intake_audit_log", "validation_failed", "export_queue"],
      "security_rules": "firebase/firestore.rules",
      "type_definitions": "firebase/types/firestore.ts",
      "versioning_enforced": true
    },
    "neon": {
      "connection_string_env": "DATABASE_URL or NEON_DATABASE_URL",
      "schemas": ["clnt", "shq"],
      "canonical_schema": "clnt",
      "audit_schema": "shq",
      "migration_files": [
        "db/neon/01_schema.sql",
        "db/neon/02_views.sql",
        "db/neon/03_seed.sql",
        "db/neon/04_employee_vendor_ids.sql",
        "db/neon/05_audit_log.sql",
        "db/neon/06_error_log.sql"
      ]
    }
  },
  "mcp_integration": {
    "composio_config": "composio.config.json",
    "garage_mcp": "garage-mcp/",
    "heir_config": "heir.doctrine.yaml",
    "endpoints": {
      "client_intake": "/mcp/client-intake",
      "company_validate": "/mcp/client-intake/company/validate",
      "company_promote": "/mcp/client-intake/company/promote",
      "employee_validate": "/mcp/client-intake/employee/validate",
      "employee_promote": "/mcp/client-intake/employee/promote"
    }
  },
  "ci_cd": {
    "workflow": ".github/workflows/migrate.yml",
    "name": "OR BT - Apply Neon Schema",
    "trigger": "push to main branch",
    "actions": [
      "Checkout code",
      "Install PostgreSQL client",
      "Validate schema file exists",
      "Apply schema to Neon",
      "Verify schema application"
    ]
  },
  "npm_scripts_reference": {
    "environment": {
      "agent:validate-env": "Validate agent environment (bootstrap, database, tables)"
    },
    "database": {
      "migrate": "Run database migrations via MCP",
      "promote": "Promote Firebase data to Neon",
      "export:run": "Run vendor export transformations"
    },
    "errors": {
      "errors:check": "Check all errors",
      "errors:unresolved": "Show unresolved errors",
      "errors:critical": "Show critical errors",
      "errors:summary": "Show error summary by agent"
    },
    "ui": {
      "dev-ui": "Start intake wizard UI in dev mode",
      "build-ui": "Build intake wizard UI for production"
    },
    "compliance": {
      "compliance:check": "Check repo compliance",
      "compliance:fix": "Auto-fix compliance issues"
    },
    "imo": {
      "imo:workflow": "Run complete IMO workflow",
      "imo:workflow-quick": "Quick compliance check"
    }
  },
  "documentation": {
    "llm_overview": "README_LLM_OVERVIEW.md",
    "audit_manifest": "AUDIT_MANIFEST_LLM.json",
    "bootstrap_config": "bootstrap_program.json",
    "ctb_architecture": "training/CTB_MAP.md",
    "agent_structure": "training/README_AGENT_STRUCTURE.md",
    "agent_examples": "training/EXAMPLES.md",
    "error_log_docs": "db/neon/ERROR_LOG_README.md",
    "multi_repo_setup": "db/neon/MULTI_REPO_ERROR_LOG_SETUP.md"
  },
  "bootstrap_ready": {
    "status": "READY",
    "bootstrap_file": "bootstrap_program.json",
    "validation_script": "scripts/setup_agent_env.ts",
    "validation_command": "npm run agent:validate-env",
    "expected_output": "✅ Agent environment is valid and ready.",
    "prerequisites": [
      "DATABASE_URL environment variable set",
      "bootstrap_program.json exists",
      "Required tables created in Neon",
      "Firebase project configured"
    ]
  }
}
